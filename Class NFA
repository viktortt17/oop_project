import java.io.Serializable;
import java.util.*;

public class NFA implements Serializable {
    private Set<String> states;
    private Set<String> alphabet;
    private Set<Transition> transitions;
    private String startState;
    private Set<String> acceptStates;

    public NFA(Set<String> states, Set<String> alphabet, Set<Transition> transitions, String startState, Set<String> acceptStates) {
        this.states = states;
        this.alphabet = alphabet;
        this.transitions = transitions;
        this.startState = startState;
        this.acceptStates = acceptStates;
    }

    public Set<String> getStates() {
        return states;
    }

    public Set<String> getAlphabet() {
        return alphabet;
    }

    public Set<Transition> getTransitions() {
        return transitions;
    }

    public String getStartState() {
        return startState;
    }

    public Set<String> getAcceptStates() {
        return acceptStates;
    }

    public boolean isDeterministic() {
        Map<String, Set<String>> transitionMap = new HashMap<>();

        for (Transition t : transitions) {
            if (t.getSymbol().equals("ε")) {
                return false;
            }

            String key = t.getFromState() + "," + t.getSymbol();
            transitionMap.putIfAbsent(key, new HashSet<>());
            transitionMap.get(key).add(t.getToState());

            if (transitionMap.get(key).size() > 1) {
                return false;
            }
        }
        return true;
    }

    public boolean isLanguageEmpty() {
        if (startState == null || acceptStates.isEmpty()) {
            return true;
        }

        Set<String> visited = new HashSet<>();
        Stack<String> stack = new Stack<>();
        stack.push(startState);

        while (!stack.isEmpty()) {
            String state = stack.pop();
            if (visited.contains(state)) continue;
            visited.add(state);

            if (acceptStates.contains(state)) {
                return false;
            }

            for (Transition t : transitions) {
                if (t.getFromState().equals(state)) {
                    stack.push(t.getToState());
                }
            }
        }
        return true;
    }

    public static NFA positiveClosure(NFA original) {
        Set<String> newStates = new HashSet<>(original.getStates());
        Set<String> newAlphabet = new HashSet<>(original.getAlphabet());
        Set<Transition> newTransitions = new HashSet<>(original.getTransitions());
        String newStartState = original.getStartState();
        Set<String> newAcceptStates = new HashSet<>(original.getAcceptStates());


        Set<String> cleanedAcceptStates = new HashSet<>(newAcceptStates);
        for (String state : newAcceptStates) {
            if (original.isEpsilonReachable(newStartState, state)) {
                cleanedAcceptStates.remove(state);
            }
        }

        return new NFA(newStates, newAlphabet, newTransitions, newStartState, cleanedAcceptStates);
    }


    private boolean isEpsilonReachable(String from, String to) {
        Set<String> visited = new HashSet<>();
        Deque<String> stack = new ArrayDeque<>();
        stack.push(from);

        while (!stack.isEmpty()) {
            String current = stack.pop();
            if (current.equals(to)) return true;
            if (visited.contains(current)) continue;
            visited.add(current);

            for (Transition t : transitions) {
                if (t.getFromState().equals(current) && t.getSymbol().equals("ε")) {
                    stack.push(t.getToState());
                }
            }
        }
        return false;
    }



    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("Състояния: ").append(states).append("\n");
        sb.append("Азбука: ").append(alphabet).append("\n");
        sb.append("Начално състояние: ").append(startState).append("\n");
        sb.append("Финални състояния: ").append(acceptStates).append("\n");
        sb.append("Преходи:\n");
        for (Transition t : transitions) {
            sb.append("  ").append(t.getFromState()).append(" --").append(t.getSymbol()).append("--> ").append(t.getToState()).append("\n");
        }
        return sb.toString();
    }

}
