import java.util.HashSet;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.io.*;

import java.util.HashSet;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;

public class NFA implements Serializable{
    private static final long srVersion = 1L;  //Уникален идентификатор за серилация 
    public static int idCounter = 0;   //Главен брояч

    private int id; //нова id за всеки нов атрибут
    private Set<String> states;
    private Set<String> alphabet;
    private List<Transition> transitions;
    private String startState;
    private Set<String> acceptStates;

    public NFA() {
        this.id = ++ idCounter;
        this.states = new HashSet<>();
        this.alphabet = new HashSet<>();
        this.transitions = new ArrayList<>();
        this.acceptStates = new HashSet<>();
    }
// Запис във файла
    public void saveFile(String filename){
        try(ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(filename))){
            out.writeObject(this);
            System.out.println("Автоматът е записан в "+ filename);
        }catch (IOException е ){
            System.out.println("Грешка при записването");
        }
    }
// Четене от файла
    public static NFA loadFilr(String filename){
        try(ObjectInputStream in = new ObjectInputStream(new FileInputStream(filename))){
            return (NFA) in.readObject();
        }catch (IOException | ClassNotFoundException e){
            System.out.println("Грешка при зарежадането");
            return null;
        }
    }


    public int getId(){
        return id;
    }

    public void addState(String state) {
        states.add(state);
    }

    public void addAlphabet(String symbol) {
        alphabet.add(symbol);
    }

    public void setStartState(String state) {
        startState = state;
    }

    public void addAcceptState(String state) {
        acceptStates.add(state);
    }

    // Добавя преход между състоянията
    public void addTransition(String from, String symbol, String to) {
        transitions.add(new Transition(from, symbol, to));
        states.add(from);  // Уверяваме се, че състоянията съществуват
        states.add(to);
        alphabet.add(symbol); // Добавяме символа в азбуката (ако още не е добавен)
    }

    // Извежда всички преходи в автомата
    public void printTransitions() {
        System.out.println("Преходи в автомата:");
        for (Transition t : transitions) {
            System.out.println(t);
        }
    }

    // Метод за извеждане на информация за автомата
    @Override
    public String toString() {
        return "Състояния: " + states + "\n" +
                "NFA ID: " + id + "\n"+
                "Азбука: " + alphabet + "\n" +
                "Начално състояние: " + startState + "\n" +
                "Крайни състояния: " + acceptStates;
    }
}

